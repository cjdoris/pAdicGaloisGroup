function replace_all(x, pat, repl)
  while true do
    i := Index(x, pat);
    if i eq 0 then
      break;
    else
      x := x[1..i-1] cat repl cat x[i+#pat..#x];
    end if;
  end while;
  return x;
end function;

function template(tmpl, fields)
  for x in fields do
    tmpl := replace_all(tmpl, "{" cat x[1] cat "}", x[2]);
  end for;
  return tmpl;
end function;

function read_lines(filename)
  F := Open(filename, "r");
  ret := [];
  while true do
    line := Gets(F);
    if IsEof(line) then
      return ret;
    else
      Append(~ret, line);
    end if;
  end while;
end function;

function read_data(
  : prime := 2
  , degree := 4
  , algorithm := "ALG1"
  , jump := 8
  , starts := [1..jump]
  , ofile_template := "test-localfields_p{prime}_d{degree}_{algorithm}_{start}of{jump}"
  , ofiles := [template(ofile_template, [
      <"prime", IntegerToString(prime)>,
      <"degree", IntegerToString(degree)>,
      <"algorithm", algorithm>,
      <"jump", IntegerToString(jump)>,
      <"start", IntegerToString(start)>
    ]) : start in starts]
  , only_last := true
  )
  data := [eval line : line in read_lines(ofile), ofile in ofiles];
  if only_last then
    A := AssociativeArray();
    for x in data do
      A[x[1]] := x;
    end for;
    data := [A[k] : k in Keys(A)];
  end if;
  return data;
end function;

function histogram(xs : bin_size:=1)
  counts := AssociativeArray();
  for x in xs do
    bin := Floor(x / bin_size);
    if IsDefined(counts, bin) then
      counts[bin] +:= 1;
    else
      counts[bin] := 1;
    end if;
  end for;
  return [<bin*bin_size, counts[bin]> : bin in Sort(SetToSequence(Keys(counts)))];
end function;

function local_fields_lookup_table(:prime:=false, degree:=false)
  fields := LocalFields(:PrimeIs:=prime, DegreeIs:=degree);
  A := AssociativeArray();
  for x in fields do
    A[<x`p, x`poly>] := x;
  end for;
  return A;
end function;

procedure show_histogram(xs : bin_size:=1, scale:=1, bin_fmt:="%6.2o", count_fmt:="%6o")
  for row in histogram(xs : bin_size:=bin_size) do
    printf "%o %o %o\n", Sprintf(bin_fmt, row[1]), Sprintf(count_fmt, row[2]), &cat[Strings() | "=" : i in [1..Round(row[2] * scale)]];
  end for;
end procedure;

function mean(xs)
  return &+xs / #xs;
end function;

function median(xs)
  xs := Sort([x : x in xs]);
  return xs[#xs div 2 + 1];
end function;